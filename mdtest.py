import os
import sys
import base64

a = ''
with open(os.path.join(sys.path[0], "hello.md"), "rb") as f:
    a = base64.b64encode(f.read())

print(base64.b64decode(a))




# b'LS0tDQpfX0FkdmVydGlzZW1lbnQgOilfXw0KDQotIF9fW3BpY2FdKGh0dHBzOi8vbm9kZWNhLmdpdGh1Yi5pby9waWNhL2RlbW8vKV9fIC0gaGlnaCBxdWFsaXR5IGFuZCBmYXN0IGltYWdlDQogIHJlc2l6ZSBpbiBicm93c2VyLg0KLSBfX1tiYWJlbGZpc2hdKGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvYmFiZWxmaXNoLylfXyAtIGRldmVsb3BlciBmcmllbmRseQ0KICBpMThuIHdpdGggcGx1cmFscyBzdXBwb3J0IGFuZCBlYXN5IHN5bnRheC4NCg0KWW91IHdpbGwgbGlrZSB0aG9zZSBwcm9qZWN0cyENCg0KLS0tDQoNCiMgaDEgSGVhZGluZyA4LSkNCiMjIGgyIEhlYWRpbmcNCiMjIyBoMyBIZWFkaW5nDQojIyMjIGg0IEhlYWRpbmcNCiMjIyMjIGg1IEhlYWRpbmcNCiMjIyMjIyBoNiBIZWFkaW5nDQoNCg0KIyMgSG9yaXpvbnRhbCBSdWxlcw0KDQpfX18NCg0KLS0tDQoNCioqKg0KDQoNCiMjIFR5cG9ncmFwaGljIHJlcGxhY2VtZW50cw0KDQpFbmFibGUgdHlwb2dyYXBoZXIgb3B0aW9uIHRvIHNlZSByZXN1bHQuDQoNCihjKSAoQykgKHIpIChSKSAodG0pIChUTSkgKHApIChQKSArLQ0KDQp0ZXN0Li4gdGVzdC4uLiB0ZXN0Li4uLi4gdGVzdD8uLi4uLiB0ZXN0IS4uLi4NCg0KISEhISEhID8/Pz8gLCwgIC0tIC0tLQ0KDQoiU21hcnR5cGFudHMsIGRvdWJsZSBxdW90ZXMiIGFuZCAnc2luZ2xlIHF1b3RlcycNCg0KDQojIyBFbXBoYXNpcw0KDQoqKlRoaXMgaXMgYm9sZCB0ZXh0KioNCg0KX19UaGlzIGlzIGJvbGQgdGV4dF9fDQoNCipUaGlzIGlzIGl0YWxpYyB0ZXh0Kg0KDQpfVGhpcyBpcyBpdGFsaWMgdGV4dF8NCg0Kfn5TdHJpa2V0aHJvdWdofn4NCg0KDQojIyBCbG9ja3F1b3Rlcw0KDQoNCj4gQmxvY2txdW90ZXMgY2FuIGFsc28gYmUgbmVzdGVkLi4uDQo+PiAuLi5ieSB1c2luZyBhZGRpdGlvbmFsIGdyZWF0ZXItdGhhbiBzaWducyByaWdodCBuZXh0IHRvIGVhY2ggb3RoZXIuLi4NCj4gPiA+IC4uLm9yIHdpdGggc3BhY2VzIGJldHdlZW4gYXJyb3dzLg0KDQoNCiMjIExpc3RzDQoNClVub3JkZXJlZA0KDQorIENyZWF0ZSBhIGxpc3QgYnkgc3RhcnRpbmcgYSBsaW5lIHdpdGggYCtgLCBgLWAsIG9yIGAqYA0KKyBTdWItbGlzdHMgYXJlIG1hZGUgYnkgaW5kZW50aW5nIDIgc3BhY2VzOg0KICAtIE1hcmtlciBjaGFyYWN0ZXIgY2hhbmdlIGZvcmNlcyBuZXcgbGlzdCBzdGFydDoNCiAgICAqIEFjIHRyaXN0aXF1ZSBsaWJlcm8gdm9sdXRwYXQgYXQNCiAgICArIEZhY2lsaXNpcyBpbiBwcmV0aXVtIG5pc2wgYWxpcXVldA0KICAgIC0gTnVsbGEgdm9sdXRwYXQgYWxpcXVhbSB2ZWxpdA0KKyBWZXJ5IGVhc3khDQoNCk9yZGVyZWQNCg0KMS4gTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQNCjIuIENvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdA0KMy4gSW50ZWdlciBtb2xlc3RpZSBsb3JlbSBhdCBtYXNzYQ0KDQoNCjEuIFlvdSBjYW4gdXNlIHNlcXVlbnRpYWwgbnVtYmVycy4uLg0KMS4gLi4ub3Iga2VlcCBhbGwgdGhlIG51bWJlcnMgYXMgYDEuYA0KDQpTdGFydCBudW1iZXJpbmcgd2l0aCBvZmZzZXQ6DQoNCjU3LiBmb28NCjEuIGJhcg0KDQoNCiMjIENvZGUNCg0KSW5saW5lIGBjb2RlYA0KDQpJbmRlbnRlZCBjb2RlDQoNCiAgICAvLyBTb21lIGNvbW1lbnRzDQogICAgbGluZSAxIG9mIGNvZGUNCiAgICBsaW5lIDIgb2YgY29kZQ0KICAgIGxpbmUgMyBvZiBjb2RlDQoNCg0KQmxvY2sgY29kZSAiZmVuY2VzIg0KDQpgYGANClNhbXBsZSB0ZXh0IGhlcmUuLi4NCmBgYA0KDQpTeW50YXggaGlnaGxpZ2h0aW5nDQoNCmBgYCBqcw0KdmFyIGZvbyA9IGZ1bmN0aW9uIChiYXIpIHsNCiAgcmV0dXJuIGJhcisrOw0KfTsNCg0KY29uc29sZS5sb2coZm9vKDUpKTsNCmBgYA0KDQojIyBUYWJsZXMNCg0KfCBPcHRpb24gfCBEZXNjcmlwdGlvbiB8DQp8IC0tLS0tLSB8IC0tLS0tLS0tLS0tIHwNCnwgZGF0YSAgIHwgcGF0aCB0byBkYXRhIGZpbGVzIHRvIHN1cHBseSB0aGUgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIGludG8gdGVtcGxhdGVzLiB8DQp8IGVuZ2luZSB8IGVuZ2luZSB0byBiZSB1c2VkIGZvciBwcm9jZXNzaW5nIHRlbXBsYXRlcy4gSGFuZGxlYmFycyBpcyB0aGUgZGVmYXVsdC4gfA0KfCBleHQgICAgfCBleHRlbnNpb24gdG8gYmUgdXNlZCBmb3IgZGVzdCBmaWxlcy4gfA0KDQpSaWdodCBhbGlnbmVkIGNvbHVtbnMNCg0KfCBPcHRpb24gfCBEZXNjcmlwdGlvbiB8DQp8IC0tLS0tLTp8IC0tLS0tLS0tLS0tOnwNCnwgZGF0YSAgIHwgcGF0aCB0byBkYXRhIGZpbGVzIHRvIHN1cHBseSB0aGUgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIGludG8gdGVtcGxhdGVzLiB8DQp8IGVuZ2luZSB8IGVuZ2luZSB0byBiZSB1c2VkIGZvciBwcm9jZXNzaW5nIHRlbXBsYXRlcy4gSGFuZGxlYmFycyBpcyB0aGUgZGVmYXVsdC4gfA0KfCBleHQgICAgfCBleHRlbnNpb24gdG8gYmUgdXNlZCBmb3IgZGVzdCBmaWxlcy4gfA0KDQoNCiMjIExpbmtzDQoNCltsaW5rIHRleHRdKGh0dHA6Ly9kZXYubm9kZWNhLmNvbSkNCg0KW2xpbmsgd2l0aCB0aXRsZV0oaHR0cDovL25vZGVjYS5naXRodWIuaW8vcGljYS9kZW1vLyAidGl0bGUgdGV4dCEiKQ0KDQpBdXRvY29udmVydGVkIGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9waWNhIChlbmFibGUgbGlua2lmeSB0byBzZWUpDQoNCg0KIyMgSW1hZ2VzDQoNCiFbTWluaW9uXShodHRwczovL29jdG9kZXguZ2l0aHViLmNvbS9pbWFnZXMvbWluaW9uLnBuZykNCiFbU3Rvcm10cm9vcG9jYXRdKGh0dHBzOi8vb2N0b2RleC5naXRodWIuY29tL2ltYWdlcy9zdG9ybXRyb29wb2NhdC5qcGcgIlRoZSBTdG9ybXRyb29wb2NhdCIpDQoNCkxpa2UgbGlua3MsIEltYWdlcyBhbHNvIGhhdmUgYSBmb290bm90ZSBzdHlsZSBzeW50YXgNCg0KIVtBbHQgdGV4dF1baWRdDQoNCldpdGggYSByZWZlcmVuY2UgbGF0ZXIgaW4gdGhlIGRvY3VtZW50IGRlZmluaW5nIHRoZSBVUkwgbG9jYXRpb246DQoNCltpZF06IGh0dHBzOi8vb2N0b2RleC5naXRodWIuY29tL2ltYWdlcy9kb2pvY2F0LmpwZyAgIlRoZSBEb2pvY2F0Ig0KDQoNCiMjIFBsdWdpbnMNCg0KVGhlIGtpbGxlciBmZWF0dXJlIG9mIGBtYXJrZG93bi1pdGAgaXMgdmVyeSBlZmZlY3RpdmUgc3VwcG9ydCBvZg0KW3N5bnRheCBwbHVnaW5zXShodHRwczovL3d3dy5ucG1qcy5vcmcvYnJvd3NlL2tleXdvcmQvbWFya2Rvd24taXQtcGx1Z2luKS4NCg0KDQojIyMgW0Vtb2ppZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9tYXJrZG93bi1pdC1lbW9qaSkNCg0KPiBDbGFzc2ljIG1hcmt1cDogOndpbms6IDpjcnVzaDogOmNyeTogOnRlYXI6IDpsYXVnaGluZzogOnl1bToNCj4NCj4gU2hvcnRjdXRzIChlbW90aWNvbnMpOiA6LSkgOi0oIDgtKSA7KQ0KDQpzZWUgW2hvdyB0byBjaGFuZ2Ugb3V0cHV0XShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQtZW1vamkjY2hhbmdlLW91dHB1dCkgd2l0aCB0d2Vtb2ppLg0KDQoNCiMjIyBbU3Vic2NyaXB0XShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQtc3ViKSAvIFtTdXBlcnNjcmlwdF0oaHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0LXN1cCkNCg0KLSAxOV50aF4NCi0gSH4yfk8NCg0KDQojIyMgW1w8aW5zPl0oaHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0LWlucykNCg0KKytJbnNlcnRlZCB0ZXh0KysNCg0KDQojIyMgW1w8bWFyaz5dKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9tYXJrZG93bi1pdC1tYXJrKQ0KDQo9PU1hcmtlZCB0ZXh0PT0NCg0KDQojIyMgW0Zvb3Rub3Rlc10oaHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0LWZvb3Rub3RlKQ0KDQpGb290bm90ZSAxIGxpbmtbXmZpcnN0XS4NCg0KRm9vdG5vdGUgMiBsaW5rW15zZWNvbmRdLg0KDQpJbmxpbmUgZm9vdG5vdGVeW1RleHQgb2YgaW5saW5lIGZvb3Rub3RlXSBkZWZpbml0aW9uLg0KDQpEdXBsaWNhdGVkIGZvb3Rub3RlIHJlZmVyZW5jZVtec2Vjb25kXS4NCg0KW15maXJzdF06IEZvb3Rub3RlICoqY2FuIGhhdmUgbWFya3VwKioNCg0KICAgIGFuZCBtdWx0aXBsZSBwYXJhZ3JhcGhzLg0KDQpbXnNlY29uZF06IEZvb3Rub3RlIHRleHQuDQoNCg0KIyMjIFtEZWZpbml0aW9uIGxpc3RzXShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQtZGVmbGlzdCkNCg0KVGVybSAxDQoNCjogICBEZWZpbml0aW9uIDENCndpdGggbGF6eSBjb250aW51YXRpb24uDQoNClRlcm0gMiB3aXRoICppbmxpbmUgbWFya3VwKg0KDQo6ICAgRGVmaW5pdGlvbiAyDQoNCiAgICAgICAgeyBzb21lIGNvZGUsIHBhcnQgb2YgRGVmaW5pdGlvbiAyIH0NCg0KICAgIFRoaXJkIHBhcmFncmFwaCBvZiBkZWZpbml0aW9uIDIuDQoNCl9Db21wYWN0IHN0eWxlOl8NCg0KVGVybSAxDQogIH4gRGVmaW5pdGlvbiAxDQoNClRlcm0gMg0KICB+IERlZmluaXRpb24gMmENCiAgfiBEZWZpbml0aW9uIDJiDQoNCg0KIyMjIFtBYmJyZXZpYXRpb25zXShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQtYWJicikNCg0KVGhpcyBpcyBIVE1MIGFiYnJldmlhdGlvbiBleGFtcGxlLg0KDQpJdCBjb252ZXJ0cyAiSFRNTCIsIGJ1dCBrZWVwIGludGFjdCBwYXJ0aWFsIGVudHJpZXMgbGlrZSAieHh4SFRNTHl5eSIgYW5kIHNvIG9uLg0KDQoqW0hUTUxdOiBIeXBlciBUZXh0IE1hcmt1cCBMYW5ndWFnZQ0KDQojIyMgW0N1c3RvbSBjb250YWluZXJzXShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQtY29udGFpbmVyKQ0KDQo6Ojogd2FybmluZw0KKmhlcmUgYmUgZHJhZ29ucyoNCjo6Og0K'